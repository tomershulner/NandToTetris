class DragonBallGame {
    field Goku goku;
    field Floor floor;

    field boolean is_ball_on_screen;
    field int available_balls;
    

    field Array dragonBalls;

    field int finished;

    constructor DragonBallGame new() {
        let finished = 0; // Is the game finished
        let dragonBalls = Array.new(7);
        let is_ball_on_screen = false;
        let available_balls = 7;
        return this;
    }
   

    method int wait_for_game_start() {
        var String str;
        var int key, cycles;
        let key = 0;
        let cycles = 0;


        // Draw floor
        let floor = Floor.new(7680);
        do floor.drawFloor();

        let str = "Collect all 7 dragon balls to be granted a wish!";
		do Output.moveCursor(8, 8);
		do Output.printString(str);

        let str = "Press space to start";
        do Output.moveCursor(10, 22);
        do Output.printString(str);

		do str.dispose();

        while (~(key=32)) {
            let key = Keyboard.keyPressed();
            let cycles = cycles + 1;
        }

        do Screen.clearScreen();
        return cycles;
    }

    method void remove_ball(int index){
        var int i;
        let i = index;
        while (i < (available_balls - 1)) {
            let dragonBalls[i] = dragonBalls[i + 1];
            let i = i + 1;
        }
        // Decrease the number of available balls
        let available_balls = available_balls - 1;

        if (available_balls = 0) {
            do dragonBalls.dispose();
        }
        return;
        }


    method void initializeGame() {
        // Draw main character
        let goku = Goku.new(16, 192, 10, 10);
        do goku.draw();

                
        // Draw floor
        let floor = Floor.new(7680);
        do floor.drawFloor();

        do initialize_dragon_balls();


        return;
    }

    method void initialize_dragon_balls() {
        var int i;
        var Ball ball;
        let i = 0;
        while (i < 7) {
            let ball = Ball.new(i + 1);
            let dragonBalls[i] = ball;
            let i = i + 1;
        }
        return;
    }

    method boolean play() {
        var int key, random_ball_number;
        var Ball rnd_ball;
        var boolean colide;

        // Create randomness for the dragon balls
        do LCGRandom.setSeed(wait_for_game_start());

        // When the player start the game start main game loop
        do initializeGame();
        let key = 0;
        while (~(key = 81)) { // while 'q' isn't pressed

            // Create ball instace to appear on screen
            if (~is_ball_on_screen) {
                if (available_balls = 1) {
                    let random_ball_number = 0;
                }
                else {
                    let random_ball_number = LCGRandom.randRange(0, available_balls - 1);
                }
                
                let rnd_ball = dragonBalls[random_ball_number];
                let is_ball_on_screen = true;
                do Output.moveCursor(0,0);
                do Output.printInt(rnd_ball.getNumber());
            }
            
            // Check for player input
            let key = Keyboard.keyPressed();
            
            // update main charchter
            do goku.update(key);

            // update the current ball location
            do rnd_ball.moveLeft();

            if (rnd_ball.isAtEnd()) {
                do rnd_ball.dispose();
                let rnd_ball = Ball.new(random_ball_number + 1);
                let dragonBalls[random_ball_number] = rnd_ball;
                let is_ball_on_screen = false;
            }

            // check for collision
            if (detect_ceiling_collision()) {
                do failed_game();
                return true;
            }
            if (detect_ball_collision(rnd_ball)) {
                // If the player collected a ball
                do remove_ball(random_ball_number);
                do rnd_ball.dispose();
                let is_ball_on_screen = false;
            }

            // check if the player collected all the dragon balls
            if (available_balls = 0) {
                do dragonBalls.dispose();
                do finish_game_succes();
                return true;
            }
            do Sys.wait(20);
        }
        return true;
    }

    method void failed_game() {
        // TODO: add final screen
        do goku.dispose();
        do floor.dispose();
        do Output.printString("Finished");
        return true;
    }

    method void finish_game_succes() {
        do goku.dispose();
        do floor.dispose();
		do Output.moveCursor(6, 10);
        do Output.printString("Well Done Goku!");
        return;
    }


    method boolean detect_ball_collision(Ball ball) {
        var int goku_top, goku_bottom, ball_top, ball_bottom;
        let goku_top = goku.getY();
        let goku_bottom = goku_top + goku.getHeight();

        let ball_top = ball.getY();
        let ball_bottom = ball_top + ball.getSize();

        if (goku_top > ball_bottom) {
            return false;
        }
        if (goku_bottom < ball_top) {
            return false;
        }
        if (goku.getX() + goku.getWidth() < ball.getX()) {
            return false;
        }
        if (goku.getX() > ball.getX() + ball.getSize()) {
            return false;
        }
        return true;
    }

    method boolean detect_ceiling_collision() {
        if (goku.getY() < 1) {
            // Check if goku collides with the ceiling  TODO: maybe move to goku class
            return true;
        }
        return false;
    }
}